pipeline {
    agent any

    environment {
        AWS_CLI = "/usr/local/bin/aws"
        PYTHON = "/Users/rahultandon/.pyenv/versions/3.10.2/bin/python"
        CFN_TEMPLATE_ABS_PATH = "/Users/rahultandon/dev/trying-stuff/l-aws/jmeter-automation-repo/04/simplified-complete-workflow-exp.yml"
        S3_URI_OF_PYTHON_HELPER="s3://v1-edfora-load-test-reports/2025/pull_from_sqs_and_s3.py"
    }

    parameters {
        stashedFile 'test_data'
        stashedFile 'jmx_file'
        string(
            name: 'LOAD_TEST_S3_BUCKET', 
            defaultValue: 'v1-edfora-load-test-reports', 
            description: 's3 bucket for storing input CSV & JMX files + output reports'
        )
        string(
            name: 'LOAD_TEST_QUEUE', 
            defaultValue: 'https://sqs.ap-south-1.amazonaws.com/577638381290/MyQueue1.fifo', 
            description: 'Name of SQS queue for passing chunks of master csv file to JMeter worker EC2 instances'
        )
        string (
            name: 'NUM_WORKERS',
            defaultValue: '2',
            description: 'Number of JMeter worker instances to split & distribute the master CSV to'
        )
    }
    stages {
        stage('Moving input files') {
            steps {
                // to do: throw error if input files are not present
                withFileParameter('test_data') {
                    sh 'mv $test_data test_data.csv'
                }
                withFileParameter('jmx_file') {
                    sh 'mv $jmx_file test_plan.jmx'
                }
                fileExists 'test_data.csv'
                fileExists 'test_plan.jmx'
            }
        }
        
        stage('Verify assumed resources exist') {
            steps {
                // useful for debugging purposes
                // sh 'ls -al ./'
                sh 'pwd'

                sh 'ls -al ${WORKSPACE}'
                
                sh '${AWS_CLI} --version' // ensure AWS CLI is accessible
                
                // Ensure load_test_s3_bucket exists. Will throw error & exit if the bucket does not exist
                sh '${AWS_CLI} s3 ls $LOAD_TEST_S3_BUCKET' 
                
                // Ensure we have Python 3
                sh 'which python3'
            }

        }

        stage('Split CSV, upload to S3, upload URIs to SQS') {  
            steps {
                git branch: 'main', url: '/Users/rahultandon/dev/trying-stuff/l-aws/jmeter-automation-repo'
                
                // the code below is tightly coupled to the git repo where the automation code is stored.
                // TODO: fix this unique ID stuff
                sh '''
                # s3_path_for_test_data="s3://$LOAD_TEST_S3_BUCKET/$current_date_time/test_data.csv"
                # s3_path_for_jmx="s3://$LOAD_TEST_S3_BUCKET/$current_date_time/test_plan.jmx"
                # example 2025/20-Jan-12h:33m:12s
                current_date_time="$(date '+%Y/%d-%b-%Hh:%Mm:%Ss')"
                echo $current_data_time
                pwd
                cd 04
                ${PYTHON} upload_from_jenkins.py ${NUM_WORKERS} $(date '+%Y/%d-%b-%Hh:%Mm:%Ss') ../test_data.csv ../test_plan.jmx $LOAD_TEST_S3_BUCKET $LOAD_TEST_QUEUE
                
                # upload python helper to S3
                pwd 
                ls .
                ls ..
                ${AWS_CLI} s3 cp ./pull_from_sqs_and_s3.py ${S3_URI_OF_PYTHON_HELPER}
                '''
            }
        }

        stage('Provision resource & run test') {
            steps {
                script {
                    hooktoNotifyStackCreated = registerWebhook()
                    hooktoNotifyLoadTestCompleted = registerWebhook()
                    stackName = "Loadtest${BUILD_NUMBER}"
                    sh '''
                    pwd
                    echo "todo complete integration cloudformation"
                    exit 0
                    $AWS_CLI cloudformation create-stack \
                        --stack-name ${stackName} \
                        --template-body file://${CFN_TEMPLATE_ABS_PATH} \
                        --capabilities CAPABILITY_IAM \
                        --region ap-south-1 \
                        --parameters \
                            ParameterKey=QueueURL,ParameterValue="https://sqs.ap-south-1.amazonaws.com/577638381290/MyQueue1.fifo" \
                            ParameterKey=MsgGroupId,ParameterValue="my_group_1" \
                            ParameterKey=PathForCSV,ParameterValue="data.csv" \
                            ParameterKey=PathForJMX,ParameterValue="test_plan.jmx" \
                            ParameterKey=S3UriForMasterCSV,ParameterValue="s3://v1-edfora-load-test-reports/2025/30-Jan-19h:26m:49s/master_data.csv" \
                            ParameterKey=S3UriForJMXFile,ParameterValue="s3://v1-edfora-load-test-reports/2025/30-Jan-19h:26m:49s/test_plan.jmx" \
                            ParameterKey=S3UriForPythonFile,ParameterValue="${python_s3_uri}"
                        --output text
                    '''
                }
            }
        }
        
        // stage('Upload to S3 & Configure EC2 instances') {
        //     steps {
        //         script {
        //             // example value of current_data_time: 2025/20-Jan-12h:33m:12s
        //             def current_date_time= sh(script: 'echo "$(date \'+%Y/%d-%b-%Hh:%Mm:%Ss\')"', returnStdout: true).toString().trim()
        //             s3_path_for_test_data="s3://${LOAD_TEST_S3_BUCKET}/${current_date_time}/test_data.csv"
        //             s3_path_for_jmx="s3://${LOAD_TEST_S3_BUCKET}/${current_date_time}/test_plan.jmx"
                    
        //             sh 'python '
        //             // sh '''
        //             // $AWS_CLI s3 cp test_data.csv $s3_path_for_test_data
        //             // $AWS_CLI s3 cp test_plan.jmx $s3_path_for_jmx
        //             // echo "done with s3 upload"
        //             // exit 1
        //             // '''
        //         }
                
        //     }
        // }
        // stage('Create Cloudformation stack') {
        //     steps {
        //         git branch: 'main', url: 'https://github.com/RahulTandon1/cloudformation-trial-1'
        //         sh '''
        //         $AWS_CLI cloudformation create-stack \
        //             --stack-name stack-117 \
        //             --template-body file://v1.yaml \
        //             --region ap-south-1 \
        //             --parameters \
        //                 ParameterKey=S3URLOfCsv,ParameterValue="s3://v1-edfora-load-test-reports/2025/20-Jan-12h:41m:44s/test_data.csv" \
        //                 ParameterKey=S3URLOfJMX,ParameterValue="s3://v1-edfora-load-test-reports/2025/20-Jan-12h:41m:44s/test_plan.jmx" \
        //             --output text
        //         '''
        //     }
        // }
        // stage('Wait on completion of load test') {
        //     options {
        //         timeout(time: 10, unit: "MINUTES")
        //         // timeout(time: 2, unit: "HOURS") // TODO: for actual pipeline (could parameterize)
        //     }
        //     steps {
        //         script {
        //             hook = registerWebhook()
        //             callbackURL = hook.url
                    
        //             // Call a remote system to start execution, passing the callback url
        //             //sh "curl -X POST -H 'Content-Type: application/json' -d '{\"callback\":\"${callbackURL}"}' http://httpbin.org/post"

        //             echo "Waiting for POST to ${callbackURL}"
        //             data = waitForWebhook hook
                    
        //             echo "Webhook called with data: ${data}"
        //             // def jsonSlurper = new JsonSlurper()
        //             // echo "Class of object is ${object.getClass()}"
        //             def object = readJSON text: data
        //             // data.S3_URL_of_test_report will contain the S3 information to the pull JMX report
        //         }
        //     }
        // }
        // stage('Delete provisioned infrastructure') {
        //     steps {
        //         sh '''echo 'TODO: complete this step'
        //         $AWS_CLI cloudformation delete-stack \
        //             --stack-name arn:aws:cloudformation:ap-south-1:577638381290:stack/stack-117/3c5ca530-d71e-11ef-be7b-0685e1d5018b \
        //             --region ap-south-1
        //         '''
        //     }
        //     // will not delete the dedicated S3 bucket for reports
        //     // TODO: should we delete the csv and jmx uploaded?
        //     // delete the cloudformation stack
        // }

        // stage('Create CloudFormation Stack') {
        //     steps {
        //         script {
        //             def stackName = 'jenkins-created-stack-1'
        //             def templateFile = '/Users/rahultandon/dev/trying-stuff/l-aws/cloudformation-trial-1'
                    
        //             // Create or update the CloudFormation stack
        //             // cfnUpdate(stack: stackName, file: templateFile, params: [], timeoutInMinutes: 30)
        //             cfnUpdate(stack: stackName, file: templateFile, params: [], timeoutInMinutes: 30)
        //         }
        //     }
        // }
        
        // stage('Echo ARNs') {
        //     steps {
        //         script {
        //             def stackName = 'my-stack-name'
                    
        //             // Get stack outputs
        //             def outputs = cfnDescribe(stack: stackName)
                    
        //             // Echo ARNs or other outputs
        //             outputs.each { key, value ->
        //                 echo "Output ${key}: ${value}"
        //             }
        //         }
        //     }
        // }
    }
}
